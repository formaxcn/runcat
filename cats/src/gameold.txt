/**
 *
 * @author 
 *
 */
class Game extends egret.DisplayObjectContainer {
	private mapsize: number = 9;
    private mapcent: number = Math.floor(this.mapsize / 2);
    private map: any[] = [];
    private flags: any[] = [];
    private stcat: Cat = new Cat();
    private catstrX = this.mapcent;
    private catstrY = this.mapcent;
    private gameDiff = 6;
    private stps = 0;
	
    public constructor() {
        super();
		var btnStart:egret.Bitmap = new egret.Bitmap(RES.getRes("btnStart"));
        btnStart.x = (egret.MainContext.instance.stage.stageWidth - btnStart.width) / 2;
        btnStart.y = (egret.MainContext.instance.stage.stageHeight - btnStart.height)/2;
        this.addChild(btnStart);
        btnStart.name = "btS";
		btnStart.touchEnabled = true;
		btnStart.addEventListener(egret.TouchEvent.TOUCH_TAP,this.onAddToStage,this);
    }

	private onAddToStage(evt:egret.TouchEvent){
		//this.removeEventListener(egret.Event.ADDED_TO_STAGE,this.onAddToStage,this);
        //var btnStart: egret.Bitmap = evt.currentTarget;
        //this.removeChild(btnStart);
		this.removeChild(this.getChildByName("btS"));
		this.startbg();
    }
	
    private startbg(): void {
		//
		this.map= [];
		this.flags= [];
		this.stcat= new Cat();
		this.catstrX = this.mapcent;
		this.catstrY = this.mapcent;
		this.stps = 0;
        this.addpots();
        this.stcat.change(200,420,false);
        this.addChild(this.stcat);
        // var btnStart: egret.Bitmap = new egret.Bitmap(RES.getRes("btnStart"));
        // btnStart.x = (egret.MainContext.instance.stage.stageWidth - btnStart.width) / 2;
        // btnStart.y = (egret.MainContext.instance.stage.stageHeight - btnStart.height)/2;
        // this.addChild(btnStart);
        // btnStart.touchEnabled = true;
        // btnStart.addEventListener(egret.TouchEvent.TOUCH_TAP,this.touchHandler,this);
    }

    // private touchHandler(evt: egret.TouchEvent): void {
       
        // this.stcat.change(200,420,false);
        // this.addChild(this.stcat);
    // }
	
    private addpots(): void {
        for(var i: number = 0;i < this.mapsize;i++) {
            this.map[i] = [];
            this.flags[i] = [];
            for(var j: number = 0;j < this.mapsize;j++) {//red pot
                if(Math.floor(Math.random() * this.gameDiff + 1) == 1 && !(this.mapcent == i && this.mapcent == j)) {
                    this.flags[i][j] = -1;
                    this.map[i][j] = new egret.Bitmap(RES.getRes("pot2"));
                }
                else {//grey pot
                    this.flags[i][j] = 0;
                    this.map[i][j] = new egret.Bitmap(RES.getRes("pot1"));
                    this.map[i][j].touchEnabled = true;
                    this.map[i][j].addEventListener(egret.TouchEvent.TOUCH_TAP,this.touchPotHanbler,this);
                }
                this.map[i][j].x = j * 48 + (i % 2) * 24 + 12;
                this.map[i][j].y = i * 45 + 300;
                this.addChild(this.map[i][j]);
            }
        }
    }

    private touchPotHanbler(evt: egret.TouchEvent): void {
        var localpot: egret.Bitmap = evt.currentTarget;
        var newpot: egret.Bitmap = new egret.Bitmap(RES.getRes("pot2"));
        newpot.x = localpot.x;
        newpot.y = localpot.y;
        var temj = Math.floor((newpot.x - 12) / 48);
        var temi = Math.floor((newpot.y - 300) / 45);
        this.flags[temi][temj] = -1;
        this.stps = this.stps + 1;
        this.removeChild(localpot);
        this.addChild(newpot);
        this.removeChild(this.stcat);

        var path: any = this.findPath(this.catstrX,this.catstrY);
        if(path[1][0] == -1) {
            console.log("猫咪围住");
            var temnt: any = this.findNext(this.catstrX,this.catstrY,this.flags);
            if(temnt[0] == -1) {
                var gmov: GameOver = new GameOver(true,this.stps);
				gmov.name="gmov";
                this.addChild(gmov);
				gmov.addEventListener("replayEvent" , this.doRestart , this);
            }
            else {
                console.log(path[1]);
                this.catstrX = temnt[0];
                this.catstrY = temnt[1];
                var tx = this.catstrY * 48 + (this.catstrX % 2) * 24;
                var ty = this.catstrX * 45 + 238;
                this.stcat = new Cat();
                this.stcat.change(tx,ty,true);
                this.addChild(this.stcat);
            }
        }
        else if(path[1][0] == -2) {
            console.log("到达边界");
            var gmov: GameOver = new GameOver(false,this.stps);
			gmov.name="gmov";
            this.addChild(gmov);
			gmov.addEventListener("replayEvent" , this.doRestart , this);
        }
        else {
            console.log(path[1]);
            this.catstrX = path[1][0];
            this.catstrY = path[1][1];
            var tx = this.catstrY * 48 + (this.catstrX % 2) * 24;
            var ty = this.catstrX * 45 + 238;
            this.stcat = new Cat();
            this.stcat.change(tx,ty,false);
            this.addChild(this.stcat);
        }

    }
	
	private doRestart(event:egret.Event){
		this.removeChild(this.getChildByName("gmov"));
        this.startbg();
    }

    public findNext(row: number,coln: number,temf: any): any {
        var rtnum: number[] = [];
		var rdflags:number[]=[];
		var rowflag:number=0;
        if(this.isExit(row,coln)) {
            rtnum[0] = -2;
            rtnum[1] = -2;
            return rtnum;
        }
        if(temf[row][coln - 1] == 0) {
            rtnum[0] = row;
            rtnum[1] = coln - 1;
            return rtnum;
        }
		 if(row % 2 == 0) {
            if(temf[row - 1][coln - 1] == 0) {
                rtnum[0] = row - 1;
                rtnum[1] = coln - 1;
            }
            else if(temf[row - 1][coln] == 0) {
                rtnum[0] = row - 1;
                rtnum[1] = coln;
            }
            else if(temf[row][coln + 1] == 0) {
                rtnum[0] = row;
                rtnum[1] = coln + 1;
            }
            else if(temf[row + 1][coln] == 0) {
                rtnum[0] = row + 1;
                rtnum[1] = coln;
            }
            else if(temf[row + 1][coln - 1] == 0) {
                rtnum[0] = row + 1;
                rtnum[1] = coln - 1;
            }
            else {
                rtnum[0] = -1;
                rtnum[1] = -1;
            }
        }
        else {
            if(temf[row - 1][coln] == 0) {
                rtnum[0] = row - 1;
                rtnum[1] = coln;
            }
            else if(temf[row - 1][coln + 1] == 0) {
                rtnum[0] = row - 1;
                rtnum[1] = coln + 1;
            }
            else if(temf[row][coln + 1] == 0) {
                rtnum[0] = row;
                rtnum[1] = coln + 1;
            }
            else if(temf[row + 1][coln + 1] == 0) {
                rtnum[0] = row + 1;
                rtnum[1] = coln + 1;
            }
            else if(temf[row + 1][coln] == 0) {
                rtnum[0] = row + 1;
                rtnum[1] = coln;
            }
            else {
                rtnum[0] = -1;
                rtnum[1] = -1;
            }
        }
        // if(row % 2 == 0){
			// rowflag=-1;
		// }
		// else{
			// rowflag=1;
		// }
		
		// var rttem:any[]=[];
		// for(var i:number;i<6;i++){
			// rdflags[i]=0;
			// for(var j:number;j<2;j++){
				// rttem[i][j]=0;
			// }
		// }
		// if(temf[row][coln - 1] == 0) {
            // rdflags[0] = 1;
			// rttem[0]=[];
			// rttem[0][0]=row;
			// rttem[0][1]=coln-1;
		// }
		// if(temf[row][coln + 1] == 0) {
            // rdflags[3] = 1;
			// rttem[3]=[];
			// rttem[3][0]=row;
			// rttem[3][1]=coln+1;
        // }
		// if(temf[row - 1][coln +rowflag] == 0) {
			// rdflags[1] = 1;
			// rttem[1]=[];
			// rttem[1][0]=row-1;
			// rttem[1][1]=coln +rowflag;
		// }
		// if(temf[row - 1][coln] == 0) {
			// rdflags[2] = 1;
			// rttem[2]=[];
			// rttem[2][0]=row-1;
			// rttem[2][1]=coln;
		// }
		// if(temf[row + 1][coln] == 0) {
			// rdflags[4] = 1;
			// rttem[4]=[];
			// rttem[4][0]=row+1;
			// rttem[4][1]=coln ;
		// }
		// if(temf[row + 1][coln +rowflag] == 0) {
			// rdflags[5] = 1;
			// rttem[5]=[];
			// rttem[5][0]=row+1;
			// rttem[5][1]=coln +rowflag;
		// }
		
		// var sum:number=0;
		// for(var i:number=0;i<6;i++)
			// sum=sum+rdflags[i];
		
		// if(sum==0){
			// rtnum[0]=-1;
			// rtnum[1]=-1;
		// }
		// else{
			// var chgflag=Math.floor(6*Math.random());
			// while(rdflags[chgflag]!=1){
				// chgflag=Math.floor(6*Math.random());
			// }
			// rtnum[0]=rttem[chgflag][0];
			// rtnum[1]=rttem[chgflag][1];
		// }
        return rtnum;
    }

    public findPath(row: number,coln: number): any {
        var temFlags: any[] = [];
        for(var i: number = 0;i < this.mapsize;i++) {
            temFlags[i] = [];
            for(var j: number = 0;j < this.mapsize;j++) {
                temFlags[i][j] = this.flags[i][j];
            }
        }

        var nev: Array<any> = [];
        var flag: boolean = true;
        var nowNode: number[] = [];
		var popflag:boolean=false;
        nowNode[0] = row;
        nowNode[1] = coln;
        temFlags[row][coln] = 1;
        nev.push(nowNode);
		console.log("push"+nowNode);
        var next: number[] = [];
        while(true) {
			console.log("now node"+nowNode);
			
            next = this.findNext(nowNode[0],nowNode[1],temFlags);
			console.log("next node"+next);
            if(next[0] == -1) {
                if(nev.length == 0) {
                    //被围住
                    nev.push(next);
                    nev.push(next);
                    return nev;
                }
                else {
                    nowNode = nev.pop();
					popflag=true;
					console.log("pop"+nowNode);
                }
            }
            else if(next[0] == -2) {
                //到边界
                nev.push(next);
                nev.push(next);
                return nev;
            }
            else {
				if(popflag) {
					nev.push(nowNode);
					console.log("push"+nowNode);
					popflag=false;
				}
                temFlags[next[0]][next[1]] = 1;

                nev.push(next);
				console.log("push"+next);
                nowNode = next;
            }
			
			
        }
		console.log("this is a while flag");
    }

	public findPathW(row:number,coln:number):any{
		var temFlags: any[] = [];
        for(var i: number = 0;i < this.mapsize;i++) {
            temFlags[i] = [];
            for(var j: number = 0;j < this.mapsize;j++) {
                temFlags[i][j] = this.flags[i][j];
            }
        }
		
		
	}

    public isExit(row: number,coln: number): boolean {
        if(row == 0 || row == this.mapsize - 1 || coln == 0 || coln == this.mapsize - 1)
            return true;
        else
            return false;
    }
}     
